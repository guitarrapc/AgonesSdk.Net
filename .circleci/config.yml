version: 2.1
executors:
  dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      NUGET_XMLDOC_MODE: skip

workflows:
  build-and-push:
    jobs:
      # sdk
      - build-test:
          name: build
          project: AgonesSdkCsharp
          filters:
            tags:
              only: /.*/
      - build-push:
          name: push
          context: nuget
          project: AgonesSdkCsharp
          requires:
            - build
          filters:
            tags:
              only: /^[0-9](\.[0-9]){2}$/
            branches:
              ignore: /.*/
      # hosting
      - build-test:
          name: build:Hosting
          project: AgonesSdkCsharp.Hosting
          filters:
            tags:
              only: /.*/
      - build-push:
          name: push:Hosting
          context: nuget
          project: AgonesSdkCsharp.Hosting
          requires:
            - build:Hosting
          filters:
            tags:
              only: /^[0-9](\.[0-9]){2}$/
            branches:
              ignore: /.*/

jobs:
  build-test:
    executor: dotnet
    parameters:
      project:
        type: string
    steps:
      - checkout
      - run: dotnet build ./src/<< parameters.project >> -c Debug -p:Version=${CIRCLE_TAG}
      - run: dotnet test ./tests/<< parameters.project >>.Tests -c Debug < /dev/null
      # - run: dotnet tool install -g dotnet-reportgenerator-globaltool
      # - run: dotnet test -c Debug --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Include=[<< parameters.project >>.*]*); echo $x;
      # - run: curl -s https://codecov.io/bash > codecov
      # - run: chmod +x codecov
      # - run: ./codecov -f ./tests/<< parameters.project >>.Tests/coverage.opencover.xml
  build-push:
    executor: dotnet
    parameters:
      project:
        type: string
    steps:
      - checkout
      - run:
          name: deploy when exists tag
          command: |
            dotnet build ./src/<< parameters.project >> -c Release -p:Version=${CIRCLE_TAG}
            dotnet test ./tests/<< parameters.project >>.Tests -c Release < /dev/null
            dotnet pack ./src/<< parameters.project >> -c Release --no-build -p:Version=${CIRCLE_TAG}
            dotnet nuget push ./bin/Release/<< parameters.project >>.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY} --skip-duplicate
      - store_artifacts:
          path: ./src/<< parameters.project >>/bin/Release/<< parameters.project >>.${CIRCLE_TAG}.nupkg
          destination: ./<< parameters.project >>/
